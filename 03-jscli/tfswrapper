#!/usr/bin/env node

//Load Required Modules
import {execSync} from 'child_process';
import fs from 'fs';
import {loadSharedConfigFiles} from '@aws-sdk/shared-ini-file-loader';
import * as readline from 'node:readline';



// Configuration Parameters
const AWS_USE_PROFILE="demo";
const DEBUG=true;
const REPO_JSON="repo.json";
var AWS_CREDENTIALS = {};

//Setup shell command
const shell = (cmd) => execSync(cmd, { encoding: 'utf8' });

// //Suppress the AWS SDK Warning
process.env.AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE = '1';

// FUNCTIONS
function executableIsAvailable(name){
    let msg = "Checking for executable";
    (DEBUG == true) && process.stdout.write (`${msg}: ${name}`);
    readline.cursorTo(process.stdout, 0);
    try{ 
        shell(`which ${name}`); 
        (DEBUG == true) && process.stdout.write (`${msg}: ${name} - OK` + "\n");

    }
    catch(error){
        process.stdout.write (`${msg}: ${name} - FAILED` + "\n");
        console.log();
        console.debug (error);
        process.exit(1);
    }
}


function processArgv (args) {
    if (arguments.length < 1) {
        console.error ("Missing parameters for function: processArgv <args>");
        process.exit(1);
    }
    
    let aList = args;
    aList.shift();
    aList.shift();
    return aList.join(' ');
}

function loadRepoJson (repojson) {
    let config = fs.readFileSync(repojson);
    //(DEBUG == true) && console.log (JSON.parse(config)); 
    return JSON.parse(config);
}

function loadTfVersion() {
    return JSON.parse(execSync("terraform -version -json"));
}

async function returnConfigFile () {
    let configFile = (await loadSharedConfigFiles());
    return configFile;

}

var cf = {};
cf = (async function() {
    let jimBob = (await returnConfigFile())
    return jimBob;
})();
const foo = (await cf);
// cf.then(x => {
//     console.log ("ESWAR: " + x.region);
// })

const output = JSON.parse(JSON.stringify(foo));

//const output = JSON.stringify(foo);
let demo = output.credentialsFile["demo"];
console.log ("waited for returnConfigFile function " + JSON.stringify(demo));
console.log (output.credentialsFile["demo"]);
console.log (demo);

async function returnRegion () {
    let region = (await loadSharedConfigFiles()).configFile?.['demo']?.region;
    return region;

}

//var REG = returnRegion();
//console.log (REG);

//POTENTIAL
var blah = {};
blah = (async function() {
    let jim = (await returnRegion())
    return jim;
})();
const test = (await blah);
console.log (`waited for blah async function ${test}`);


var blah1
returnRegion().then (x => {
    console.log(`this is a then ${x}`);
    
})
console.log (`this is ${blah1}`);



// END FUNCTIONS

//Check to see if required dependent binaries are installed and in path 
executableIsAvailable('brew');
executableIsAvailable('tfenv');
executableIsAvailable('terraform');

//Get Credentials
let region = (await loadSharedConfigFiles()).configFile?.[AWS_USE_PROFILE]?.region;
let creds = (await loadSharedConfigFiles()).credentialsFile?.[AWS_USE_PROFILE];
AWS_CREDENTIALS = {
    "aws_access_key_id" : creds.aws_access_key_id,
    "aws_secret_access_key" : creds.aws_secret_access_key,
    "region" : region
  };

//Load TF Version
const tfEnvironment = loadTfVersion();
(DEBUG == true) && console.log (`Found Terraform Version in path: ${tfEnvironment.terraform_version}`);

// //Load repo.json file
const repoJson = loadRepoJson(REPO_JSON);


//Switching to the version of terraform found in repo.json if TF VER is not active
(DEBUG == true) && console.log (`COMPARE: TF ENV: ${tfEnvironment.terraform_version}  -- REPO TF:  ${repoJson.repo_dependencies.terraform}`);

if ( tfEnvironment.terraform_version != repoJson.repo_dependencies.terraform ) {
    const tfenvcmd = "tfenv use " + repoJson.repo_dependencies.terraform;
    console.log ("Found Terraform Version: " + repoJson.repo_dependencies.terraform + " in repo");
    console.log ("Setting up terraform before proceeding...");
    execSync(tfenvcmd, {stdio: 'inherit'});
}


// TODO: Run Terraform fmt

// TODO: Run Terraform validate

// TODO: Send usage to HoneyComb.io for Telemetry and Usage stats for observability


//Get all CMD arguments and pass them to Terraform
let argList = processArgv(process.argv);
if (argList.length == 0) {
    argList = "--help";
}
(DEBUG == true) && console.log (`Arguments Passed to Terraform: ${argList}`);
const tfcmd = "terraform " + argList;

//Run the Terraform command with the parameters provided on command line
process.env.AWS_ACCESS_KEY_ID = AWS_CREDENTIALS.aws_access_key_id;
process.env.AWS_SECRET_ACCESS_KEY = AWS_CREDENTIALS.aws_secret_access_key;
process.env.AWS_REGION = AWS_CREDENTIALS.region;
execSync(tfcmd, {stdio: 'inherit'});


