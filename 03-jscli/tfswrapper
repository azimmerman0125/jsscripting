#!/usr/bin/env node

//Load Required Modules
import {execSync} from 'child_process';
import fs from 'fs';
import {loadSharedConfigFiles} from '@aws-sdk/shared-ini-file-loader';
import * as readline from 'node:readline';



// Configuration Parameters
const AWS_USE_PROFILE="demo";
const DEBUG=true;
const REPO_JSON="repo.json";
var AWS_CREDENTIALS = {};

//Setup shell command
const shell = (cmd) => execSync(cmd, { encoding: 'utf8' });

// //Suppress the AWS SDK Warning
process.env.AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE = '1';

// FUNCTIONS
function executableIsAvailable(name){
    let msg = "Checking for executable";
    (DEBUG == true) && process.stdout.write (`${msg}: ${name}`);
    readline.cursorTo(process.stdout, 0);
    try{ 
        shell(`which ${name}`); 
        (DEBUG == true) && process.stdout.write (`${msg}: ${name} - OK` + "\n");

    }
    catch(error){
        process.stdout.write (`${msg}: ${name} - FAILED` + "\n");
        console.log();
        console.debug (error);
        process.exit(1);
    }
}


function processArgv (args) {
    if (arguments.length < 1) {
        console.error ("Missing parameters for function: processArgv <args>");
        process.exit(1);
    }
    
    let aList = args;
    aList.shift();
    aList.shift();
    return aList.join(' ');
}

function loadRepoJson (repojson) {
    let config = fs.readFileSync(repojson);
    //(DEBUG == true) && console.log (JSON.parse(config)); 
    return JSON.parse(config);
}

function loadTfVersion() {
    let tfVersion = JSON.parse(execSync("terraform -version -json"));
    (DEBUG == true) && console.log ("Found Terraform Version in path: " + tfVersion.terraform_version);
    return tfVersion;
}

async function returnConfigFile() {
    let configFile = (await loadSharedConfigFiles());
    return configFile;
}

async function loadAWSCredentials(profile) {
    //Calling async returnConfigFile
    let sharedConfigFile = (async function() {
        let awaitConfigFile = (await returnConfigFile())
        return awaitConfigFile;
    })();
    const scf = (await sharedConfigFile);
    const output = JSON.parse(JSON.stringify(scf));
    //console.log ("DEBUG: " + JSON.stringify(output));

    let credentials = {
        'aws_access_key_id' : output.credentialsFile[profile].aws_access_key_id,
        'aws_secret_access_key' : output.credentialsFile[profile].aws_secret_access_key,
        'region' : output.configFile[profile].region
    }

    return JSON.parse(JSON.stringify(credentials));
}

function setTFEnvironment (tfEnv, tfRepo) {
    //Switching to the version of terraform found in repo.json if TF VER is not active
    (DEBUG == true) && console.log (`COMPARE: TF ENV: ${tfEnv}  -- REPO TF:  ${tfRepo}`);

    if ( tfEnv != tfRepo ) {
        const tfenvcmd = "tfenv use " + tfRepo;
        console.log ("Found Terraform Version: " + tfRepo + " in repo");
        console.log ("Setting up terraform before proceeding...");
        execSync(tfenvcmd, {stdio: 'inherit'});
    }
}

function buildTFCommand (params) {
    let argList = processArgv(params);
    if (argList.length == 0) {
        argList = "--help";
    }
    (DEBUG == true) && console.log (`Arguments Passed to Terraform: ${argList}`);
    const tfcmd = "terraform " + argList;
    return tfcmd;
}
// END FUNCTIONS

//Check to see if required dependent binaries are installed and in path 
executableIsAvailable('brew');
executableIsAvailable('tfenv');
executableIsAvailable('terraform');

//Get Credentials
AWS_CREDENTIALS = (await loadAWSCredentials(AWS_USE_PROFILE));

//Load TF Version
const tfEnvironment = loadTfVersion();

//Load repo.json file
const repoJson = loadRepoJson(REPO_JSON);

//Setup the correct terraform version using tfenv
setTFEnvironment(tfEnvironment.terraform_version, repoJson.repo_dependencies.terraform);


// TODO: Run Terraform fmt

// TODO: Run Terraform validate

// TODO: Send usage to HoneyComb.io for Telemetry and Usage stats for observability


//Get all CMD arguments and pass them to Terraform
const tfcmd = buildTFCommand (process.argv);

//Run the Terraform command with the parameters provided on command line
process.env.AWS_ACCESS_KEY_ID = AWS_CREDENTIALS.aws_access_key_id;
process.env.AWS_SECRET_ACCESS_KEY = AWS_CREDENTIALS.aws_secret_access_key;
process.env.AWS_REGION = AWS_CREDENTIALS.region;
execSync(tfcmd, {stdio: 'inherit'});


